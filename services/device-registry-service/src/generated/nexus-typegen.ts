/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as t from './../sourceTypes';
import { ContextType } from './../context';

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateDeviceInput: {
    // input type
    device: NexusGenInputs['CreateDeviceInputDevice']; // CreateDeviceInputDevice!
  };
  CreateDeviceInputDevice: {
    // input type
    description?: string | null; // String
    name?: string | null; // String
    powerSource?: string | null; // String
  };
}

export interface NexusGenEnums {
  Access: t.Access;
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  BinaryCapability: t.BinaryCapability;
  Device: t.Device;
  Expost: {
    // root type
    capabilities: Array<NexusGenRootTypes['Capability'] | null>; // [Capability]!
    type: string; // String!
  };
  Mutation: {};
  NumericCapability: t.NumericCapability;
  Query: {};
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {
  Capability: t.Capability;
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions;

export type NexusGenAllTypes = NexusGenRootTypes &
  NexusGenScalars &
  NexusGenEnums;

export interface NexusGenFieldTypes {
  BinaryCapability: {
    // field return type
    access: NexusGenEnums['Access']; // Access!
    description: string | null; // String
    property: string; // String!
    type: string; // String!
  };
  Device: {
    // field return type
    description: string | null; // String
    exposes: NexusGenRootTypes['Expost']; // Expost!
    id: string; // ID!
    name: string; // String!
    powerSource: string | null; // String
  };
  Expost: {
    // field return type
    capabilities: Array<NexusGenRootTypes['Capability'] | null>; // [Capability]!
    type: string; // String!
  };
  Mutation: {
    // field return type
    registerDevice: NexusGenRootTypes['Device'] | null; // Device
  };
  NumericCapability: {
    // field return type
    access: NexusGenEnums['Access']; // Access!
    description: string | null; // String
    max: number | null; // Float
    min: number | null; // Float
    property: string; // String!
    type: string; // String!
    unit: string | null; // String
  };
  Query: {
    // field return type
    allDevices: NexusGenRootTypes['Device'][]; // [Device!]!
  };
}

export interface NexusGenFieldTypeNames {
  BinaryCapability: {
    // field return type name
    access: 'Access';
    description: 'String';
    property: 'String';
    type: 'String';
  };
  Device: {
    // field return type name
    description: 'String';
    exposes: 'Expost';
    id: 'ID';
    name: 'String';
    powerSource: 'String';
  };
  Expost: {
    // field return type name
    capabilities: 'Capability';
    type: 'String';
  };
  Mutation: {
    // field return type name
    registerDevice: 'Device';
  };
  NumericCapability: {
    // field return type name
    access: 'Access';
    description: 'String';
    max: 'Float';
    min: 'Float';
    property: 'String';
    type: 'String';
    unit: 'String';
  };
  Query: {
    // field return type name
    allDevices: 'Device';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    registerDevice: {
      // args
      input: NexusGenInputs['CreateDeviceInput']; // CreateDeviceInput!
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  Capability: 'BinaryCapability' | 'NumericCapability';
}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = 'Capability';

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: ContextType;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
